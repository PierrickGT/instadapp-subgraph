// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class TubInterface__cupsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class TubInterface extends SmartContract {
  static bind(address: Address): TubInterface {
    return new TubInterface("TubInterface", address);
  }

  open(): Bytes {
    let result = super.call("open", []);

    return result[0].toBytes();
  }

  try_open(): CallResult<Bytes> {
    let result = super.tryCall("open", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBytes());
  }

  cups(param0: Bytes): TubInterface__cupsResult {
    let result = super.call("cups", [EthereumValue.fromFixedBytes(param0)]);

    return new TubInterface__cupsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_cups(param0: Bytes): CallResult<TubInterface__cupsResult> {
    let result = super.tryCall("cups", [EthereumValue.fromFixedBytes(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new TubInterface__cupsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  gem(): Address {
    let result = super.call("gem", []);

    return result[0].toAddress();
  }

  try_gem(): CallResult<Address> {
    let result = super.tryCall("gem", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  gov(): Address {
    let result = super.call("gov", []);

    return result[0].toAddress();
  }

  try_gov(): CallResult<Address> {
    let result = super.tryCall("gov", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  skr(): Address {
    let result = super.call("skr", []);

    return result[0].toAddress();
  }

  try_skr(): CallResult<Address> {
    let result = super.tryCall("skr", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  sai(): Address {
    let result = super.call("sai", []);

    return result[0].toAddress();
  }

  try_sai(): CallResult<Address> {
    let result = super.tryCall("sai", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  ink(param0: Bytes): BigInt {
    let result = super.call("ink", [EthereumValue.fromFixedBytes(param0)]);

    return result[0].toBigInt();
  }

  try_ink(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("ink", [EthereumValue.fromFixedBytes(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  tab(param0: Bytes): BigInt {
    let result = super.call("tab", [EthereumValue.fromFixedBytes(param0)]);

    return result[0].toBigInt();
  }

  try_tab(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("tab", [EthereumValue.fromFixedBytes(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  rap(param0: Bytes): BigInt {
    let result = super.call("rap", [EthereumValue.fromFixedBytes(param0)]);

    return result[0].toBigInt();
  }

  try_rap(param0: Bytes): CallResult<BigInt> {
    let result = super.tryCall("rap", [EthereumValue.fromFixedBytes(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  per(): BigInt {
    let result = super.call("per", []);

    return result[0].toBigInt();
  }

  try_per(): CallResult<BigInt> {
    let result = super.tryCall("per", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  pep(): Address {
    let result = super.call("pep", []);

    return result[0].toAddress();
  }

  try_pep(): CallResult<Address> {
    let result = super.tryCall("pep", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class OpenCall extends EthereumCall {
  get inputs(): OpenCall__Inputs {
    return new OpenCall__Inputs(this);
  }

  get outputs(): OpenCall__Outputs {
    return new OpenCall__Outputs(this);
  }
}

export class OpenCall__Inputs {
  _call: OpenCall;

  constructor(call: OpenCall) {
    this._call = call;
  }
}

export class OpenCall__Outputs {
  _call: OpenCall;

  constructor(call: OpenCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class JoinCall extends EthereumCall {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class ExitCall extends EthereumCall {
  get inputs(): ExitCall__Inputs {
    return new ExitCall__Inputs(this);
  }

  get outputs(): ExitCall__Outputs {
    return new ExitCall__Outputs(this);
  }
}

export class ExitCall__Inputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExitCall__Outputs {
  _call: ExitCall;

  constructor(call: ExitCall) {
    this._call = call;
  }
}

export class LockCall extends EthereumCall {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }
}

export class FreeCall extends EthereumCall {
  get inputs(): FreeCall__Inputs {
    return new FreeCall__Inputs(this);
  }

  get outputs(): FreeCall__Outputs {
    return new FreeCall__Outputs(this);
  }
}

export class FreeCall__Inputs {
  _call: FreeCall;

  constructor(call: FreeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class FreeCall__Outputs {
  _call: FreeCall;

  constructor(call: FreeCall) {
    this._call = call;
  }
}

export class DrawCall extends EthereumCall {
  get inputs(): DrawCall__Inputs {
    return new DrawCall__Inputs(this);
  }

  get outputs(): DrawCall__Outputs {
    return new DrawCall__Outputs(this);
  }
}

export class DrawCall__Inputs {
  _call: DrawCall;

  constructor(call: DrawCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DrawCall__Outputs {
  _call: DrawCall;

  constructor(call: DrawCall) {
    this._call = call;
  }
}

export class WipeCall extends EthereumCall {
  get inputs(): WipeCall__Inputs {
    return new WipeCall__Inputs(this);
  }

  get outputs(): WipeCall__Outputs {
    return new WipeCall__Outputs(this);
  }
}

export class WipeCall__Inputs {
  _call: WipeCall;

  constructor(call: WipeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WipeCall__Outputs {
  _call: WipeCall;

  constructor(call: WipeCall) {
    this._call = call;
  }
}

export class GiveCall extends EthereumCall {
  get inputs(): GiveCall__Inputs {
    return new GiveCall__Inputs(this);
  }

  get outputs(): GiveCall__Outputs {
    return new GiveCall__Outputs(this);
  }
}

export class GiveCall__Inputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GiveCall__Outputs {
  _call: GiveCall;

  constructor(call: GiveCall) {
    this._call = call;
  }
}

export class ShutCall extends EthereumCall {
  get inputs(): ShutCall__Inputs {
    return new ShutCall__Inputs(this);
  }

  get outputs(): ShutCall__Outputs {
    return new ShutCall__Outputs(this);
  }
}

export class ShutCall__Inputs {
  _call: ShutCall;

  constructor(call: ShutCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ShutCall__Outputs {
  _call: ShutCall;

  constructor(call: ShutCall) {
    this._call = call;
  }
}

export class TabCall extends EthereumCall {
  get inputs(): TabCall__Inputs {
    return new TabCall__Inputs(this);
  }

  get outputs(): TabCall__Outputs {
    return new TabCall__Outputs(this);
  }
}

export class TabCall__Inputs {
  _call: TabCall;

  constructor(call: TabCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class TabCall__Outputs {
  _call: TabCall;

  constructor(call: TabCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RapCall extends EthereumCall {
  get inputs(): RapCall__Inputs {
    return new RapCall__Inputs(this);
  }

  get outputs(): RapCall__Outputs {
    return new RapCall__Outputs(this);
  }
}

export class RapCall__Inputs {
  _call: RapCall;

  constructor(call: RapCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RapCall__Outputs {
  _call: RapCall;

  constructor(call: RapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
