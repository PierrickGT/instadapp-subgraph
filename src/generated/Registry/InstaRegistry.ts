// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class Created extends EthereumEvent {
  get params(): Created__Params {
    return new Created__Params(this);
  }
}

export class Created__Params {
  _event: Created;

  constructor(event: Created) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proxy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogRecord extends EthereumEvent {
  get params(): LogRecord__Params {
    return new LogRecord__Params(this);
  }
}

export class LogRecord__Params {
  _event: LogRecord;

  constructor(event: LogRecord) {
    this._event = event;
  }

  get currentOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nextOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proxy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class LogEnableStaticLogic extends EthereumEvent {
  get params(): LogEnableStaticLogic__Params {
    return new LogEnableStaticLogic__Params(this);
  }
}

export class LogEnableStaticLogic__Params {
  _event: LogEnableStaticLogic;

  constructor(event: LogEnableStaticLogic) {
    this._event = event;
  }

  get logicAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogEnableLogic extends EthereumEvent {
  get params(): LogEnableLogic__Params {
    return new LogEnableLogic__Params(this);
  }
}

export class LogEnableLogic__Params {
  _event: LogEnableLogic;

  constructor(event: LogEnableLogic) {
    this._event = event;
  }

  get logicAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogDisableLogic extends EthereumEvent {
  get params(): LogDisableLogic__Params {
    return new LogDisableLogic__Params(this);
  }
}

export class LogDisableLogic__Params {
  _event: LogDisableLogic;

  constructor(event: LogDisableLogic) {
    this._event = event;
  }

  get logicAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetAddress extends EthereumEvent {
  get params(): LogSetAddress__Params {
    return new LogSetAddress__Params(this);
  }
}

export class LogSetAddress__Params {
  _event: LogSetAddress;

  constructor(event: LogSetAddress) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InstaRegistry extends SmartContract {
  static bind(address: Address): InstaRegistry {
    return new InstaRegistry("InstaRegistry", address);
  }

  logic(_logicAddress: Address): boolean {
    let result = super.call("logic", [
      EthereumValue.fromAddress(_logicAddress)
    ]);

    return result[0].toBoolean();
  }

  try_logic(_logicAddress: Address): CallResult<boolean> {
    let result = super.tryCall("logic", [
      EthereumValue.fromAddress(_logicAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  logicProxies(param0: Address): boolean {
    let result = super.call("logicProxies", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_logicProxies(param0: Address): CallResult<boolean> {
    let result = super.tryCall("logicProxies", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  logicProxiesStatic(param0: Address): boolean {
    let result = super.call("logicProxiesStatic", [
      EthereumValue.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_logicProxiesStatic(param0: Address): CallResult<boolean> {
    let result = super.tryCall("logicProxiesStatic", [
      EthereumValue.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  build(): Address {
    let result = super.call("build", []);

    return result[0].toAddress();
  }

  try_build(): CallResult<Address> {
    let result = super.tryCall("build", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  logicStatic(_logicAddress: Address): boolean {
    let result = super.call("logicStatic", [
      EthereumValue.fromAddress(_logicAddress)
    ]);

    return result[0].toBoolean();
  }

  try_logicStatic(_logicAddress: Address): CallResult<boolean> {
    let result = super.tryCall("logicStatic", [
      EthereumValue.fromAddress(_logicAddress)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  getAddress(_name: string): Address {
    let result = super.call("getAddress", [EthereumValue.fromString(_name)]);

    return result[0].toAddress();
  }

  try_getAddress(_name: string): CallResult<Address> {
    let result = super.tryCall("getAddress", [EthereumValue.fromString(_name)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  proxies(param0: Address): Address {
    let result = super.call("proxies", [EthereumValue.fromAddress(param0)]);

    return result[0].toAddress();
  }

  try_proxies(param0: Address): CallResult<Address> {
    let result = super.tryCall("proxies", [EthereumValue.fromAddress(param0)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  build1(_owner: Address): Address {
    let result = super.call("build", [EthereumValue.fromAddress(_owner)]);

    return result[0].toAddress();
  }

  try_build1(_owner: Address): CallResult<Address> {
    let result = super.tryCall("build", [EthereumValue.fromAddress(_owner)]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class EnableStaticLogicCall extends EthereumCall {
  get inputs(): EnableStaticLogicCall__Inputs {
    return new EnableStaticLogicCall__Inputs(this);
  }

  get outputs(): EnableStaticLogicCall__Outputs {
    return new EnableStaticLogicCall__Outputs(this);
  }
}

export class EnableStaticLogicCall__Inputs {
  _call: EnableStaticLogicCall;

  constructor(call: EnableStaticLogicCall) {
    this._call = call;
  }

  get _logicAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableStaticLogicCall__Outputs {
  _call: EnableStaticLogicCall;

  constructor(call: EnableStaticLogicCall) {
    this._call = call;
  }
}

export class RecordCall extends EthereumCall {
  get inputs(): RecordCall__Inputs {
    return new RecordCall__Inputs(this);
  }

  get outputs(): RecordCall__Outputs {
    return new RecordCall__Outputs(this);
  }
}

export class RecordCall__Inputs {
  _call: RecordCall;

  constructor(call: RecordCall) {
    this._call = call;
  }

  get _currentOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _nextOwner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RecordCall__Outputs {
  _call: RecordCall;

  constructor(call: RecordCall) {
    this._call = call;
  }
}

export class EnableLogicCall extends EthereumCall {
  get inputs(): EnableLogicCall__Inputs {
    return new EnableLogicCall__Inputs(this);
  }

  get outputs(): EnableLogicCall__Outputs {
    return new EnableLogicCall__Outputs(this);
  }
}

export class EnableLogicCall__Inputs {
  _call: EnableLogicCall;

  constructor(call: EnableLogicCall) {
    this._call = call;
  }

  get _logicAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableLogicCall__Outputs {
  _call: EnableLogicCall;

  constructor(call: EnableLogicCall) {
    this._call = call;
  }
}

export class BuildCall extends EthereumCall {
  get inputs(): BuildCall__Inputs {
    return new BuildCall__Inputs(this);
  }

  get outputs(): BuildCall__Outputs {
    return new BuildCall__Outputs(this);
  }
}

export class BuildCall__Inputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }
}

export class BuildCall__Outputs {
  _call: BuildCall;

  constructor(call: BuildCall) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetAddressCall extends EthereumCall {
  get inputs(): SetAddressCall__Inputs {
    return new SetAddressCall__Inputs(this);
  }

  get outputs(): SetAddressCall__Outputs {
    return new SetAddressCall__Outputs(this);
  }
}

export class SetAddressCall__Inputs {
  _call: SetAddressCall;

  constructor(call: SetAddressCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _userAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetAddressCall__Outputs {
  _call: SetAddressCall;

  constructor(call: SetAddressCall) {
    this._call = call;
  }
}

export class DisableLogicCall extends EthereumCall {
  get inputs(): DisableLogicCall__Inputs {
    return new DisableLogicCall__Inputs(this);
  }

  get outputs(): DisableLogicCall__Outputs {
    return new DisableLogicCall__Outputs(this);
  }
}

export class DisableLogicCall__Inputs {
  _call: DisableLogicCall;

  constructor(call: DisableLogicCall) {
    this._call = call;
  }

  get _logicAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableLogicCall__Outputs {
  _call: DisableLogicCall;

  constructor(call: DisableLogicCall) {
    this._call = call;
  }
}

export class Build1Call extends EthereumCall {
  get inputs(): Build1Call__Inputs {
    return new Build1Call__Inputs(this);
  }

  get outputs(): Build1Call__Outputs {
    return new Build1Call__Outputs(this);
  }
}

export class Build1Call__Inputs {
  _call: Build1Call;

  constructor(call: Build1Call) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Build1Call__Outputs {
  _call: Build1Call;

  constructor(call: Build1Call) {
    this._call = call;
  }

  get proxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
