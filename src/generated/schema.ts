// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class UserWallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserWallet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserWallet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserWallet", id.toString(), this);
  }

  static load(id: string): UserWallet | null {
    return store.get("UserWallet", id) as UserWallet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class UserWalletTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save UserWalletTransferred entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserWalletTransferred entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserWalletTransferred", id.toString(), this);
  }

  static load(id: string): UserWalletTransferred | null {
    return store.get(
      "UserWalletTransferred",
      id
    ) as UserWalletTransferred | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get currentOwner(): Bytes {
    let value = this.get("currentOwner");
    return value.toBytes();
  }

  set currentOwner(value: Bytes) {
    this.set("currentOwner", Value.fromBytes(value));
  }

  get nextOwner(): Bytes {
    let value = this.get("nextOwner");
    return value.toBytes();
  }

  set nextOwner(value: Bytes) {
    this.set("nextOwner", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class OpenedCDP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OpenedCDP entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OpenedCDP entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OpenedCDP", id.toString(), this);
  }

  static load(id: string): OpenedCDP | null {
    return store.get("OpenedCDP", id) as OpenedCDP | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cdpNumber(): BigInt {
    let value = this.get("cdpNumber");
    return value.toBigInt();
  }

  set cdpNumber(value: BigInt) {
    this.set("cdpNumber", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class WipedCDP extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save WipedCDP entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save WipedCDP entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("WipedCDP", id.toString(), this);
  }

  static load(id: string): WipedCDP | null {
    return store.get("WipedCDP", id) as WipedCDP | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cdpNumber(): BigInt {
    let value = this.get("cdpNumber");
    return value.toBigInt();
  }

  set cdpNumber(value: BigInt) {
    this.set("cdpNumber", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get daiAmount(): BigInt {
    let value = this.get("daiAmount");
    return value.toBigInt();
  }

  set daiAmount(value: BigInt) {
    this.set("daiAmount", Value.fromBigInt(value));
  }

  get daiFee(): BigInt {
    let value = this.get("daiFee");
    return value.toBigInt();
  }

  set daiFee(value: BigInt) {
    this.set("daiFee", Value.fromBigInt(value));
  }

  get makerFee(): BigInt {
    let value = this.get("makerFee");
    return value.toBigInt();
  }

  set makerFee(value: BigInt) {
    this.set("makerFee", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CompoundToMaker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CompoundToMaker entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CompoundToMaker entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CompoundToMaker", id.toString(), this);
  }

  static load(id: string): CompoundToMaker | null {
    return store.get("CompoundToMaker", id) as CompoundToMaker | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cdpNumber(): BigInt {
    let value = this.get("cdpNumber");
    return value.toBigInt();
  }

  set cdpNumber(value: BigInt) {
    this.set("cdpNumber", Value.fromBigInt(value));
  }

  get daiAmount(): BigInt {
    let value = this.get("daiAmount");
    return value.toBigInt();
  }

  set daiAmount(value: BigInt) {
    this.set("daiAmount", Value.fromBigInt(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    return value.toBigInt();
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get fees(): BigInt {
    let value = this.get("fees");
    return value.toBigInt();
  }

  set fees(value: BigInt) {
    this.set("fees", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MakerToCompound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MakerToCompound entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MakerToCompound entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MakerToCompound", id.toString(), this);
  }

  static load(id: string): MakerToCompound | null {
    return store.get("MakerToCompound", id) as MakerToCompound | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cdpNumber(): BigInt {
    let value = this.get("cdpNumber");
    return value.toBigInt();
  }

  set cdpNumber(value: BigInt) {
    this.set("cdpNumber", Value.fromBigInt(value));
  }

  get daiAmount(): BigInt {
    let value = this.get("daiAmount");
    return value.toBigInt();
  }

  set daiAmount(value: BigInt) {
    this.set("daiAmount", Value.fromBigInt(value));
  }

  get ethAmount(): BigInt {
    let value = this.get("ethAmount");
    return value.toBigInt();
  }

  set ethAmount(value: BigInt) {
    this.set("ethAmount", Value.fromBigInt(value));
  }

  get fees(): BigInt {
    let value = this.get("fees");
    return value.toBigInt();
  }

  set fees(value: BigInt) {
    this.set("fees", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
